#Rewrite Rules
#Force SSL 
RewriteEngine on
ReWriteCond %{SERVER_PORT} !^443$
RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R,L]

ErrorLog /dev/stdout
ErrorLogFormat "httpd-error [%{u}t] [%-m:%l] [pid %P:tid %T] %7F: %E: [client\ %a] %M% ,\ referer\ %{Referer}i"
LogLevel warn

ServerName archive

<VirtualHost *:443>
    DocumentRoot "/var/www/html"
    AllowEncodedSlashes NoDecode

    RewriteEngine on
    RewriteCond %{REQUEST_URI} =/app
    RewriteRule ^/(.*) https://%{HTTP_HOST}/$1/ [NC,R,L]

    SSLEngine on

    #Disable CRIME vulernability v2.4+
    SSLCompression off

    #Clean SSL Issues and enable perfect forward secrecy
    SSLProtocol all -SSLv2 -SSLv3 -TLSv1
    SSLHonorCipherOrder on
    SSLCipherSuite "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 \
EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 \
EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4"

    #SSL Cert Stuff
    SSLCertificateFile    /etc/httpd/ssl/domain.crt
    SSLCertificateKeyFile /etc/httpd/ssl/domain.key
    #SSLCertificateChainFile /etc/httpd/ssl/serverchain.pem

    SSLProxyEngine on
    #Bypassing certicate checking on self-signed client cert
    SSLProxyVerify none
    SSLProxyCheckPeerCN off
    SSLProxyCheckPeerName off
    SSLProxyCheckPeerExpire off

    ProxyPreserveHost on
    RequestHeader set X-Forwarded-Proto "https" env=HTTPS
    # Upgrade insecure requests, as an alternative to mod_substitute
    # for http -> https url rewriting in response bodies.
    #Header set Strict-Transport-Security "max-age=300"
    #Header set Content-Security-Policy: upgrade-insecure-requests

    Header set Access-Control-Max-Age "300"
    # could be 'localhost', <ip-of-docker-machine>, '</etc/hosts entry>'
    Header set Access-Control-Allow-Origin "*"
    # allow cookies to be sent cross origin
    Header set Access-Control-Allow-Credentials "true"
    Header merge Access-Control-Allow-Methods "PUT, OPTIONS"
    Header merge Access-Control-Expose-Headers "authorization"

    #Map /idp to Tomcat
    ProxyPass /idp https://idp:4443/idp
    ProxyPassReverse /idp https://idp:4443/idp

    ProxyPass /Shibboleth.sso http://sp/Shibboleth.sso
    ProxyPassReverse /Shibboleth.sso http://sp/Shibboleth.sso

    ProxyPass /fcrepo http://sp/fcrepo
    ProxyPassReverse /fcrepo http://sp/fcrepo

    ProxyPass /es http://sp/es
    ProxyPassReverse /es http://sp/es

    # Ember app
    ProxyPass /app http://sp/app
    ProxyPassReverse /app http://sp/app

    # Static pages
    ProxyPass / http://static-html/
    ProxyPassReverse / http://static-html/
</VirtualHost>

<IfModule log_config_module>
    #
    # The following directives define some format nicknames for use with
    # a CustomLog directive (see below).
    #
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common

    <IfModule logio_module>
      # You need to enable mod_logio.c to use %I and %O
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>

    #
    # The location and format of the access logfile (Common Logfile Format).
    # If you do not define any access logfiles within a <VirtualHost>
    # container, they will be logged here.  Contrariwise, if you *do*
    # define per-<VirtualHost> access logfiles, transactions will be
    # logged therein and *not* in this file.
    #
    #CustomLog "logs/access_log" common

    #
    # If you prefer a logfile with access, agent, and referer information
    # (Combined Logfile Format) you can use the following directive.
    #
    CustomLog /dev/stdout "httpd-combined %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\""
</IfModule>